1. 发现有bug的时候如何比较文件两个版本的差异？

    （1）windows平台下打开DOS命令窗口  FC game_new.js game_old.js
    （2）MAC或Linux下  diff -u game_new.js game_old.js


2. 长期而言，对于某个文件保留完整的历史对于你成为一个更高效的程序员有什么好处？

    （1）老的版本控制方法是手动另存一个老的版本，此外就是利用比如DropBox、GoogleDoc、Wiki等工具
    （2）版本控制使得工作更加安全，一旦发现问题可以回溯到先前的版本，节省时间啊；
    （3）另外，与其他成员合作的时候也更容易实现问题追溯，团队合作更加高效；
    （4）此外，抽出各个版本也能够更好呈现项目的运行轨迹，对后来的人快速进入有好处；
    

3.手动提交（比如git）和自动提交（比如谷歌文档）的优劣势分析？

    手动提交的控制性更强，在当前自己版本没有问题的情况下再提交，以免造成错误耽误其他人的工作，存在的问题就是如果忘记提交或保存，换一个地方之后就不能继续工作；
    手动提交的话省去了总是要记得提交操作的麻烦，但存在的问题是如果本身没有调试好的话会引起bug。所以手动提交适合有审核或者是仅限于互相之间的工作不影响的情况下吧。

    如果是管理项目的话，什么情况下保存版本呢：
	   （1）一个固定的时间间隔
	   （2）做了一个较大的改动
	   （3）在编辑的过程中有较长时间的间隔
	   （4）自己想要保存一个版本
    （1）和（2）存在的问题是可能这个间隔或改动后程序还存在着问题，根本就无法编译或运行；而且这样的话保存的版本会太多了。（3）的话比较合理，但是也有可能以为时间的问题会保存一些不太需要的版本。（4）的话更加灵活，但是也可能存在一个问题，或许用户保存得太频繁或者间隔时间太长了


    

4.为什么像Git的这种版本控制系统允许在一次提交中保存多个文件，但是谷歌文档对每一个文件都是分别处理？
	应该是使用场景决定的？谷歌文档是文档、表格、幻灯片文件的在线处理工具，默认情况下一个人同时只编辑一个文档，实时存储。但是git不一样啊，很多用来管理项目，文件相互之间是有很强的关联关系，因为不是实时提交的，所以一次同时提交多个相关文件就比较重要了。
    

5.怎么使用git log和git diff查看文件的历史信息？

    git log和git diff命令是建立在commit基础上的，可以比较每一次提交版本的变化情况。git log会显示每一次提交的ID、理由等信息，git diff可以比较两次提交版本之间的变化情况。
    （包含Git在内的很多命令行工具在处理有很多长行的文件时有些力不从心。比如diff命令，只会显示两个文件的某一个长行是不同的，但是并不会指出不同之处究竟在哪里。所以每一行最长不要超过120个字符。sublime中需要输入回车键来换行。）


6.版本控制如何使得你有信心做出一些可能会有破坏性的改动？

	因为可以回溯到先前的任何一个可使用的版本啊，所以都不是破坏性的更改。
	如果没有版本控制的话，每次改动都容易有很大的顾虑，怕会改坏本来是正常运行的项目。如果有的话就可以大范围尝试改进。

7. 你的工作空间已经建立了，你想用git干什么呢？

	记录学习的过程吧，也是挺有意思的一件事。先前刚学习了阮一峰的全栈工程师培训教程，收获很大，想要自己也开始记录一下。
